/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import BusinessLayer.*;
//import static java.lang.ProcessBuilder.Redirect.to;
//import static BusinessLayer.ApplicationData.data_raws;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Hashtable;
import javax.swing.JLabel;


/**
 *
 * @author user
 */
public class SMEHomePage extends javax.swing.JFrame {

    /**
     * Creates new form SMEHomePage
     */
    public SMEHomePage() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
    }
    
    ApplicationData appData = new ApplicationData();
    CycleLogic cl = new CycleLogic();
    ResultSet rs = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plantationTable = new javax.swing.JTable();
        refreshTableButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        nMSTextField = new javax.swing.JTextField();
        mCTextField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fNTextField = new javax.swing.JTextField();
        fIDTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        saveFactoryButton = new javax.swing.JButton();
        clearFactoryButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tPATextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        pIDTextField = new javax.swing.JTextField();
        savePlantationButton = new javax.swing.JButton();
        clearPlantationButton = new javax.swing.JButton();
        oRSTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tRSTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        sCCTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        iSCCTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cCTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cTextField = new javax.swing.JTextField();
        aTextField = new javax.swing.JTextField();
        cYTextField = new javax.swing.JTextField();
        saveYieldButton = new javax.swing.JButton();
        clearYieldButton = new javax.swing.JButton();
        pIDTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        RePlantationDTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        PlantationDTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        HarvestProgramEXSCTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        TotalsInCaneTable = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        Hashtable labels1 = new Hashtable();
        labels1.put(new Integer(0), new JLabel("FastTruckOne"));
        labels1.put(new Integer(300), new JLabel("FastTruckTwo"));
        labels1.put(new Integer(600), new JLabel("FastTruckThree"));
        jSlider1.setLabelTable(labels1);
        ;
        jSlider2 = new javax.swing.JSlider();
        Hashtable labels = new Hashtable();
        labels.put(new Integer(0), new JLabel("Low"));
        labels.put(new Integer(50), new JLabel("High"));
        jSlider2.setLabelTable(labels);

        ;
        jLabel6 = new javax.swing.JLabel();
        showFastTrackButton = new javax.swing.JButton();
        generateFastTrackButton = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        generateConventionalButton = new javax.swing.JButton();
        showConventionalButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        printPrivewTable = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        showIstablishmentScheduleButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        showHarvestProgramEXSCButton = new javax.swing.JButton();
        showTotalCaneYieldButton = new javax.swing.JButton();
        showHarvestProgramCCButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        ConventionalRadioButton = new javax.swing.JRadioButton();
        FastTrackRadioButton = new javax.swing.JRadioButton();
        printButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 56, 0));

        jPanel2.setBackground(new java.awt.Color(20, 29, 9));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setIcon(new javax.swing.ImageIcon("C:\\Users\\Tinsae\\Documents\\NetBeansProjects\\SSCMgmtSys\\Icons\\Skeleton_96px.png")); // NOI18N
        jLabel22.setText("Sugare Cane Supply Cycle Management System");

        jLabel23.setIcon(new javax.swing.ImageIcon("C:\\Users\\Tinsae\\Documents\\NetBeansProjects\\SSCMgmtSys\\Sugarcane Pictures\\186150671.jpg")); // NOI18N
        jLabel23.setText("jLabel23");

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setIcon(new javax.swing.ImageIcon("C:\\Users\\Tinsae\\Documents\\NetBeansProjects\\SSCMgmtSys\\Icons\\Exit Sign_32px.png")); // NOI18N
        jLabel24.setText("LogOut");
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });

        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setIcon(new javax.swing.ImageIcon("C:\\Users\\Tinsae\\Documents\\NetBeansProjects\\SSCMgmtSys\\Icons\\Exit_32px.png")); // NOI18N
        jLabel25.setText("Exit");
        jLabel25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel25MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(38, 38, 38)
                .addComponent(jLabel25)
                .addGap(58, 58, 58))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(jLabel24)))
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jPanel3.setBackground(new java.awt.Color(0, 102, 0));

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedPane1.setForeground(new java.awt.Color(0, 102, 0));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(0, 102, 0));

        plantationTable.setBackground(new java.awt.Color(0, 102, 0));
        plantationTable.setForeground(new java.awt.Color(255, 255, 255));
        plantationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(plantationTable);

        refreshTableButton.setText("Referesh Table");
        refreshTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableButtonActionPerformed(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(51, 51, 51));

        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Net Milling Season");

        nMSTextField.setText("days");

        mCTextField.setText("TCD");

        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Milling Capacity");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Factory Name");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("FactoryID");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Factory Info");

        saveFactoryButton.setText("Save");
        saveFactoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFactoryButtonActionPerformed(evt);
            }
        });

        clearFactoryButton.setText("Clear");
        clearFactoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFactoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel11))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(19, 19, 19))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel33)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(nMSTextField)
                                .addGap(1, 1, 1))
                            .addComponent(mCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fNTextField))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveFactoryButton)
                .addGap(18, 18, 18)
                .addComponent(clearFactoryButton)
                .addGap(93, 93, 93))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fNTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(mCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(nMSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveFactoryButton)
                    .addComponent(clearFactoryButton))
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(51, 51, 51));

        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Plantaion Info");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Total Plantaion");

        tPATextField.setText("ha");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Plantation ID");

        savePlantationButton.setText("Save");
        savePlantationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePlantationButtonActionPerformed(evt);
            }
        });

        clearPlantationButton.setText("Clear");
        clearPlantationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlantationButtonActionPerformed(evt);
            }
        });

        oRSTextField.setText("%");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("1st Rainy Season");

        tRSTextField.setText("%");

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("2nd Rainy Season");

        sCCTextField.setText("%");

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Seed Cane ratio");

        iSCCTextField.setText("%");

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Initial Seed Cane ratio");

        cCTextField.setText("%");

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Commercial Cane ratio");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jLabel30)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(iSCCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(oRSTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tRSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tPATextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel11Layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(sCCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(savePlantationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearPlantationButton)
                        .addGap(124, 124, 124))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tPATextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oRSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tRSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sCCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(iSCCTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePlantationButton)
                    .addComponent(clearPlantationButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(51, 51, 51));

        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Yield");

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Age");

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Cutting");

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Cane Yeild Lavel");

        cTextField.setText("PC,R1,R2,R3...");

        aTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aTextFieldActionPerformed(evt);
            }
        });

        cYTextField.setText("Ton/ha");

        saveYieldButton.setText("Save");
        saveYieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveYieldButtonActionPerformed(evt);
            }
        });

        clearYieldButton.setText("Clear");
        clearYieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearYieldButtonActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Plantation ID");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(113, 113, 113))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel36)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cYTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pIDTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveYieldButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearYieldButton)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(25, 25, 25)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pIDTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cYTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addGap(38, 38, 38)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveYieldButton)
                    .addComponent(clearYieldButton)
                    .addComponent(addButton))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addComponent(refreshTableButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(refreshButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshTableButton)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Prerequisite Info", jPanel7);

        jPanel4.setBackground(new java.awt.Color(0, 102, 0));
        jPanel4.setAutoscrolls(true);

        jPanel5.setBackground(new java.awt.Color(0, 51, 0));
        jPanel5.setAutoscrolls(true);
        jPanel5.setInheritsPopupMenu(true);

        jScrollPane4.setName(""); // NOI18N

        RePlantationDTable.setBackground(new java.awt.Color(0, 102, 102));
        RePlantationDTable.setForeground(new java.awt.Color(255, 255, 255));
        RePlantationDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Year", "SC", "CC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(RePlantationDTable);

        PlantationDTable.setBackground(new java.awt.Color(0, 51, 51));
        PlantationDTable.setForeground(new java.awt.Color(255, 255, 255));
        PlantationDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "FactoryID", "Year", "ISC", "SC", "CCPlantin Rate", "Seed Cane Planting", "Annual DA", "Cummulative DA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PlantationDTable);

        HarvestProgramEXSCTable.setBackground(new java.awt.Color(0, 51, 0));
        HarvestProgramEXSCTable.setForeground(new java.awt.Color(255, 255, 255));
        HarvestProgramEXSCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Year 0", "Year 1", "Year 2", "Year 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(HarvestProgramEXSCTable);

        TotalsInCaneTable.setBackground(new java.awt.Color(51, 0, 0));
        TotalsInCaneTable.setForeground(new java.awt.Color(255, 255, 255));
        TotalsInCaneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TotalsInCaneTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4))
            .addComponent(jScrollPane6)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel15.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Type of fast track");

        jSlider1.setBackground(new java.awt.Color(204, 204, 204));
        jSlider1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jSlider1.setForeground(new java.awt.Color(255, 255, 255));
        jSlider1.setMajorTickSpacing(300);
        jSlider1.setMaximum(600);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setAutoscrolls(true);
        jSlider1.setValueIsAdjusting(true);

        jSlider2.setBackground(new java.awt.Color(0, 51, 0));
        jSlider2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jSlider2.setForeground(new java.awt.Color(255, 255, 255));
        jSlider2.setMajorTickSpacing(50);
        jSlider2.setMaximum(50);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);
        jSlider2.setSnapToTicks(true);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Level of fast track");

        showFastTrackButton.setText("Show Fast Track");
        showFastTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFastTrackButtonActionPerformed(evt);
            }
        });

        generateFastTrackButton.setText("GENERATE SUPPLY CYCLE");
        generateFastTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateFastTrackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1)))
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(60, 60, 60)
                        .addComponent(generateFastTrackButton)
                        .addContainerGap())
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addComponent(showFastTrackButton)
                        .addGap(28, 28, 28))))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(generateFastTrackButton)
                        .addComponent(jLabel6))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showFastTrackButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setBackground(new java.awt.Color(51, 51, 51));

        generateConventionalButton.setText("CONVENTIONAL METHOD");
        generateConventionalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateConventionalButtonActionPerformed(evt);
            }
        });

        showConventionalButton.setText("Show Conventional");
        showConventionalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showConventionalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(showConventionalButton))
                    .addComponent(generateConventionalButton))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateConventionalButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showConventionalButton)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(171, 171, 171)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Supply Cycle", jPanel6);

        jPanel9.setBackground(new java.awt.Color(0, 102, 0));
        jPanel9.setForeground(new java.awt.Color(255, 255, 255));

        printPrivewTable.setBackground(new java.awt.Color(204, 204, 204));
        printPrivewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "FactoryID", "Year", "ISC", "SC", "CCPlantin Rate", "Seed Cane Planting", "Annual DA", "Cummulative DA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(printPrivewTable);

        jPanel13.setBackground(new java.awt.Color(51, 51, 51));
        jPanel13.setForeground(new java.awt.Color(255, 255, 255));

        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Choose Method");

        showIstablishmentScheduleButton.setText("Istablishment Schedule");
        showIstablishmentScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIstablishmentScheduleButtonActionPerformed(evt);
            }
        });

        jButton8.setText("Replanting Schedule");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        showHarvestProgramEXSCButton.setText("Harvest Program EX Seed Cane");
        showHarvestProgramEXSCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHarvestProgramEXSCButtonActionPerformed(evt);
            }
        });

        showTotalCaneYieldButton.setText("Total harvest Cane Yeilds");
        showTotalCaneYieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTotalCaneYieldButtonActionPerformed(evt);
            }
        });

        showHarvestProgramCCButton.setText("Harvest Program Commercial Cane");
        showHarvestProgramCCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHarvestProgramCCButtonActionPerformed(evt);
            }
        });

        jPanel14.setBackground(new java.awt.Color(102, 102, 102));

        buttonGroup1.add(ConventionalRadioButton);
        ConventionalRadioButton.setText("Conventional Method");

        buttonGroup1.add(FastTrackRadioButton);
        FastTrackRadioButton.setText("Fast Track Method");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConventionalRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(FastTrackRadioButton)
                .addGap(16, 16, 16))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FastTrackRadioButton)
                    .addComponent(ConventionalRadioButton))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showHarvestProgramEXSCButton)
                .addGap(18, 18, 18)
                .addComponent(showHarvestProgramCCButton)
                .addGap(18, 18, 18)
                .addComponent(showTotalCaneYieldButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(showIstablishmentScheduleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8)
                .addGap(68, 68, 68))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(232, 232, 232))))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(showIstablishmentScheduleButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showHarvestProgramEXSCButton)
                    .addComponent(showHarvestProgramCCButton)
                    .addComponent(showTotalCaneYieldButton))
                .addGap(3, 3, 3))
        );

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(printButton)
                        .addGap(689, 689, 689))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(237, Short.MAX_VALUE)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(419, 419, 419))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(printButton)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Reports management", jPanel8);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel25MouseClicked
        // TODO add your handling code here:
        System.exit(0);
        System.runFinalization();
    }//GEN-LAST:event_jLabel25MouseClicked

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked
        // TODO add your handling code here:
        LoginPage lg = new LoginPage();
         this.dispose();
         lg.setVisible(true);
    }//GEN-LAST:event_jLabel24MouseClicked

    private void showConventionalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showConventionalButtonActionPerformed
        // TODO add your handling code here:
        
         int NT = 0;
         int NTN = appData.getNewTotalTableN();
        NT = appData.getTotalTableN();
        int diff = NT - NTN;
        if(diff > 5){
        //appData.deleteTables();
        
        try{
            //rs = appData.getTableResultCCPD((String) fIDComboBoxC.getSelectedItem());
            rs = appData.getTableResultCACPlanting();
            ResultSetMetaData rsmd = rs.getMetaData();
            int column = rsmd.getColumnCount();
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm.addRow(data_raws);
                            }
            PlantationDTable.setModel(dtm);
            
            rs = appData.getReplantSchedule();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm1 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm1.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm1.addRow(data_raws);
                            }
            RePlantationDTable.setModel(dtm1);
            
            
            rs = appData.getHarvestProgramEXSC();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
            
            HarvestProgramEXSCTable.setModel(dtm2);
             
            rs = appData.getHarvestProgramCC();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    //dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
                            
               HarvestProgramEXSCTable.setModel(dtm2);
               
               rs = appData.getReplantFieldHarvest();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    //dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
                            
               HarvestProgramEXSCTable.setModel(dtm2);
               
               rs = appData.getTotalHCane();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm3 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm3.addRow(data_raws);
                            }
                            
               TotalsInCaneTable.setModel(dtm3);
               
               
               
               rs = appData.getTotalHCaneInP();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm3 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm3.addRow(data_raws);
                            }
                            
               TotalsInCaneTable.setModel(dtm3);
        
       
            
        
               
               
        } catch (SQLException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
         }else{
            JOptionPane.showMessageDialog(rootPane, "noting to display");
        }
    }//GEN-LAST:event_showConventionalButtonActionPerformed

    private void refreshTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableButtonActionPerformed
        try {
            // TODO add your handling code here:
            rs = appData.getTableResultPCF();
            ResultSetMetaData rsmd = rs.getMetaData();
            int column = rsmd.getColumnCount();
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_raws = new Vector();

            for(int i=1; i<=column; i++){
                columns_name.addElement(rsmd.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            while(rs.next()){
                data_raws = new Vector();
                for (int j=1; j<=column; j++){
                    data_raws.addElement(rs.getString(j));
                }
                dtm.addRow(data_raws);
            }
            plantationTable.setModel(dtm);
        } catch (SQLException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshTableButtonActionPerformed

    private void savePlantationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePlantationButtonActionPerformed
        try {
            // TODO add your handling code here:
            
            appData.savePlantationData(pIDTextField.getText(), tPATextField.getText(), oRSTextField.getText(), tRSTextField.getText(),
                    cCTextField.getText(),sCCTextField.getText(), iSCCTextField.getText());
            appData.saveNewPlantationData(pIDTextField.getText(), tPATextField.getText(), oRSTextField.getText(), tRSTextField.getText(),
                    cCTextField.getText(),sCCTextField.getText(), iSCCTextField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_savePlantationButtonActionPerformed

    private void clearPlantationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlantationButtonActionPerformed
        // TODO add your handling code here:

        fIDTextField.setText(null);
        fNTextField.setText(null);
        tPATextField.setText(null);
        pIDTextField.setText(null);    
        mCTextField.setText(null);
        
    }//GEN-LAST:event_clearPlantationButtonActionPerformed

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
/*        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            rs = appData.getFactory();
            ResultSetMetaData rsmd = rs.getMetaData();
            int column = rsmd.getColumnCount();
            
           
            while(rs.next()){
                //data_raws = new Vector();
                for (int j=1; j<= column; j++){
                    fIDComboBoxC.addItem(rs.getString(j));
                }
               
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String tCaneA = appData.getTHArea(fIDComboBoxC.getSelectedItem().toString());
        String cCommercialA = appData.getcCArea(fIDComboBoxC.getSelectedItem().toString());
        
        tCATextField.setText(tCaneA);
        cCATextField.setText(cCommercialA);*/
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void saveFactoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFactoryButtonActionPerformed
        // TODO add your handling code here:
        
            appData.saveFactoryData(fIDTextField.getText(),fNTextField.getText(), mCTextField.getText(), nMSTextField.getText());

    }//GEN-LAST:event_saveFactoryButtonActionPerformed

    private void clearFactoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFactoryButtonActionPerformed
        // TODO add your handling code here:
        fIDTextField.setText(null);
        fNTextField.setText(null);
        mCTextField.setText(null);
        nMSTextField.setText(null);
        
    }//GEN-LAST:event_clearFactoryButtonActionPerformed

    private void aTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aTextFieldActionPerformed

    private void saveYieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveYieldButtonActionPerformed
        // TODO add your handling code here:
        //pIDTextField1.setBorder(highlightBorder);
        appData.calculateNSavePlantationInfo(pIDTextField1.getText());
    }//GEN-LAST:event_saveYieldButtonActionPerformed

    private void clearYieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearYieldButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearYieldButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        appData.saveCuttingSchedule(cTextField.getText(), aTextField.getText(), cYTextField.getText());
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void generateConventionalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateConventionalButtonActionPerformed
        // TODO add your handling code here:
        
        int NTT = appData.getTotalTableN();
        int NTN = appData.getNewTotalTableN();
        int NTC = NTT - NTN;
        
        if (NTC <= 5){
       cl.generateIstablishmentSchedule();
      /* cl.generateReplantingSchedule();
       cl.generateHarvestProgramEXSC();
       cl.generateHarvestProgramCC();
       cl.generateReplantFieldHarvest();
       cl.generateHarvestCane();
       cl.calculateTotalHarvestCaneInPercent();*/
        }else{
            JOptionPane.showMessageDialog(null, "There is a generated CONVENTIONAL METHOD CYCLE!");
        }
        
    }//GEN-LAST:event_generateConventionalButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        int NT = 0;
        int NTN = 0;
        int diff = 0;
        NT = appData.getTotalTableN();
        NTN = appData.getNewTotalTableN();
        diff = NT - NTN;
        
        if(NT ==7 && NTN == 2){
            appData.deleteInitialTables();
            appData.deleteNewInitialTables();
            appData.createInitialTables();
            appData.createNewInitialTables();
    
        }else if (diff == 5 && NTN > 2){
            appData.deleteInitialTables();
            appData.deleteNewTables();
            appData.deleteNewInitialTables();
            appData.createInitialTables();
            appData.createNewInitialTables();
        }else if(NT > 7 && NTN > 2 ){
        appData.deleteTables();
        appData.deleteNewTables();
        appData.deleteNewInitialTables();
        appData.createInitialTables();
        appData.createNewInitialTables();
        //appData.createNewInitialTables();
        }else if(NT == 5 && NTN == 2){
            appData.deleteInitialTables();
            appData.deleteNewInitialTables();
            appData.createInitialTables();
            appData.createNewInitialTables();
        }else if (NT == 1 && NTN == 0){ 
            System.out.print(NT);
        appData.createInitialTables();
        appData.createNewInitialTables();
        }else if (NT == 5 && NTN == 0){
            appData.deleteInitialTables();
            appData.createInitialTables();
            appData.createNewInitialTables();
        }else if (NT == 1 && NTN == 2){
            appData.deleteNewInitialTables();
            appData.createInitialTables();
            appData.createNewInitialTables();
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void generateFastTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateFastTrackButtonActionPerformed
        // TODO add your handling code here:
        int value = 0;
        int valueTwo = 0;
        String message = null;
        value = jSlider2.getValue();
        System.out.print(value);
        valueTwo = jSlider1.getValue();
        System.out.print(valueTwo);
  
        
       FuzzyLogic fl = new FuzzyLogic();
        //fl.fuzzyLogicSystem(value);
        
         if (value == 0 && valueTwo == 0){
            message = fl.fuzzyLogicSystem("Low", "FastTrackOne");
         }else if (value == 50 && valueTwo == 0){
             message = fl.fuzzyLogicSystem("High", "FastTrackOne");
         }else if (value == 0 && valueTwo == 300){
             message = fl.fuzzyLogicSystem("Low", "FastTrackTwo");
         }else if (value == 50 && valueTwo== 300){
             message = fl.fuzzyLogicSystem("High", "FastTrackTwo");
         }else if (value == 0 && valueTwo == 600){
             message = fl.fuzzyLogicSystem("Low", "FastTrackThree");
         }else if (value == 50 && valueTwo == 600){
             message = fl.fuzzyLogicSystem("High", "FastTrackThree");
         }
         
         JOptionPane.showMessageDialog(null, message);
        
    }//GEN-LAST:event_generateFastTrackButtonActionPerformed

    private void showFastTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFastTrackButtonActionPerformed
        // TODO add your handling code here:
           int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
        //appData.deleteTables();
        
        try{
            //rs = appData.getTableResultCCPD((String) fIDComboBoxC.getSelectedItem());
            rs = appData.getNewTableResultCACPlanting();
            ResultSetMetaData rsmd = rs.getMetaData();
            int column = rsmd.getColumnCount();
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm.addRow(data_raws);
                            }
            PlantationDTable.setModel(dtm);
            
            rs = appData.getNewReplantSchedule();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm1 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm1.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm1.addRow(data_raws);
                            }
            RePlantationDTable.setModel(dtm1);
            
            
            rs = appData.getNewHarvestProgramEXSC();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
            
            HarvestProgramEXSCTable.setModel(dtm2);
             
            rs = appData.getNewHarvestProgramCC();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    //dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
                            
               HarvestProgramEXSCTable.setModel(dtm2);
               
               rs = appData.getNewReplantFieldHarvest();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm2 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    //dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
                            
               HarvestProgramEXSCTable.setModel(dtm2);
               
               rs = appData.getNewTotalHCane();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            DefaultTableModel dtm3 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm3.addRow(data_raws);
                            }
                            
               TotalsInCaneTable.setModel(dtm3);
               
               
               
               rs = appData.getNewTotalHCaneInP();
            rsmd = rs.getMetaData();
            column = rsmd.getColumnCount();
            //DefaultTableModel dtm3 = new DefaultTableModel();
            columns_name = new Vector();
            data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm3.addRow(data_raws);
                            }
                            
               TotalsInCaneTable.setModel(dtm3);
        
       
            
        
               
               
        } catch (SQLException ex) {
            Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
         }else{
            JOptionPane.showMessageDialog(rootPane, "noting to display");
        }
    }//GEN-LAST:event_showFastTrackButtonActionPerformed

    private void showIstablishmentScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIstablishmentScheduleButtonActionPerformed
        // TODO add your handling code here:
         if (ConventionalRadioButton.isSelected() == true){
             

                int NT = 0;
                int NTN = appData.getNewTotalTableN();
               NT = appData.getTotalTableN();
               int diff = NT - NTN;
               if(diff > 5){
                    try {
                        //appData.deleteTables();


                        //rs = appData.getTableResultCCPD((String) fIDComboBoxC.getSelectedItem());
                        rs = appData.getTableResultCACPlanting();
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int column = rsmd.getColumnCount();
                        DefaultTableModel dtm = new DefaultTableModel();
                        Vector columns_name = new Vector();
                        Vector data_raws = new Vector();

                        for(int i=1; i<=column; i++){
                            columns_name.addElement(rsmd.getColumnName(i));
                        }
                        dtm.setColumnIdentifiers(columns_name);
                        while(rs.next()){
                            data_raws = new Vector();
                            for (int j=1; j<=column; j++){
                                data_raws.addElement(rs.getString(j));
                            }
                            dtm.addRow(data_raws);
                        }
                        
                        printPrivewTable.setModel(dtm);
                    } catch (SQLException ex) {
                        Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
               }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
         }else{ //fast track
                 int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
                     try {
                         //appData.deleteTables();
                         
                         
                         //rs = appData.getTableResultCCPD((String) fIDComboBoxC.getSelectedItem());
                         rs = appData.getNewTableResultCACPlanting();
                         ResultSetMetaData rsmd = rs.getMetaData();
                         int column = rsmd.getColumnCount();
                         DefaultTableModel dtm = new DefaultTableModel();
                         Vector columns_name = new Vector();
                         Vector data_raws = new Vector();
                         
                         for(int i=1; i<=column; i++){
                             columns_name.addElement(rsmd.getColumnName(i));
                         }
                         dtm.setColumnIdentifiers(columns_name);
                         while(rs.next()){
                             data_raws = new Vector();
                             for (int j=1; j<=column; j++){
                                 data_raws.addElement(rs.getString(j));
                             }
                             dtm.addRow(data_raws);
                         }
                         printPrivewTable.setModel(dtm);
                     } catch (SQLException ex) {
                         Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                     }
             
                }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
         }
    }//GEN-LAST:event_showIstablishmentScheduleButtonActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
       if (ConventionalRadioButton.isSelected() == true){
           
           
                int NT = 0;
                int NTN = appData.getNewTotalTableN();
               NT = appData.getTotalTableN();
               int diff = NT - NTN;
               if(diff > 5){
                    try {
                        rs = appData.getReplantSchedule();
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int column = rsmd.getColumnCount();
                        DefaultTableModel dtm1 = new DefaultTableModel();
                        Vector columns_name = new Vector();
                        Vector data_raws = new Vector();
                        
                        for(int i=1; i<=column; i++){
                            columns_name.addElement(rsmd.getColumnName(i));
                        }
                        dtm1.setColumnIdentifiers(columns_name);
                        while(rs.next()){
                            data_raws = new Vector();
                            for (int j=1; j<=column; j++){
                                data_raws.addElement(rs.getString(j));
                            }
                            dtm1.addRow(data_raws);
                        }
                        printPrivewTable.setModel(dtm1);
                    } catch (SQLException ex) {
                        Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
               
       }else{
            int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
                try {
                    rs = appData.getNewReplantSchedule();
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int column = rsmd.getColumnCount();
                    DefaultTableModel dtm1 = new DefaultTableModel();
                    Vector columns_name = new Vector();
                    Vector data_raws = new Vector();
                    
                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm1.setColumnIdentifiers(columns_name);
                    while(rs.next()){
                        data_raws = new Vector();
                        for (int j=1; j<=column; j++){
                            data_raws.addElement(rs.getString(j));
                        }
                        dtm1.addRow(data_raws);
                    }
                    printPrivewTable.setModel(dtm1);
                } catch (SQLException ex) {
                    Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
        }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
       }
           
       
    }//GEN-LAST:event_jButton8ActionPerformed

    private void showHarvestProgramEXSCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHarvestProgramEXSCButtonActionPerformed
        // TODO add your handling code here:
         if (ConventionalRadioButton.isSelected() == true){
             int NT = 0;
                int NTN = appData.getNewTotalTableN();
               NT = appData.getTotalTableN();
               int diff = NT - NTN;
               if(diff > 5){
             try {
                 rs = appData.getHarvestProgramEXSC();
                 ResultSetMetaData rsmd = rs.getMetaData();
                 int column = rsmd.getColumnCount();
                 DefaultTableModel dtm2 = new DefaultTableModel();
                 Vector columns_name = new Vector();
                 Vector data_raws = new Vector();
                 
                 for(int i=1; i<=column; i++){
                     columns_name.addElement(rsmd.getColumnName(i));
                 }
                 dtm2.setColumnIdentifiers(columns_name);
                 while(rs.next()){
                     data_raws = new Vector();
                     for (int j=1; j<=column; j++){
                         data_raws.addElement(rs.getString(j));
                     }
                     dtm2.addRow(data_raws);
                 }
                 
                 printPrivewTable.setModel(dtm2);
             } catch (SQLException ex) {
                 Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
             }
               }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
         }else{
              int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
             try {
                 rs = appData.getNewHarvestProgramEXSC();
                 ResultSetMetaData rsmd = rs.getMetaData();
                 int column = rsmd.getColumnCount();
                 DefaultTableModel dtm2 = new DefaultTableModel();
                 Vector columns_name = new Vector();
                 Vector data_raws = new Vector();
                 
                 for(int i=1; i<=column; i++){
                     columns_name.addElement(rsmd.getColumnName(i));
                 }
                 dtm2.setColumnIdentifiers(columns_name);
                 while(rs.next()){
                     data_raws = new Vector();
                     for (int j=1; j<=column; j++){
                         data_raws.addElement(rs.getString(j));
                     }
                     dtm2.addRow(data_raws);
                 }
                 
                 printPrivewTable.setModel(dtm2);
             } catch (SQLException ex) {
                 Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
             }
         }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
       }
    }//GEN-LAST:event_showHarvestProgramEXSCButtonActionPerformed

    private void showHarvestProgramCCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHarvestProgramCCButtonActionPerformed
        // TODO add your handling code here:
        if (ConventionalRadioButton.isSelected() == true){
             int NT = 0;
                int NTN = appData.getNewTotalTableN();
               NT = appData.getTotalTableN();
               int diff = NT - NTN;
               if(diff > 5){
                 try {
                    rs = appData.getHarvestProgramCC();
            ResultSetMetaData rsmd = rs.getMetaData();
            int column = rsmd.getColumnCount();
            DefaultTableModel dtm2 = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_raws = new Vector();

                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm2.setColumnIdentifiers(columns_name);
                            while(rs.next()){
                                data_raws = new Vector();
                                for (int j=1; j<=column; j++){
                                    data_raws.addElement(rs.getString(j));
                                }
                                dtm2.addRow(data_raws);
                            }
                     
                     printPrivewTable.setModel(dtm2);
                 } catch (SQLException ex) {
                     Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                 }
               }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
        }else{
             int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
                 try {
                     rs = appData.getNewHarvestProgramCC();
                     ResultSetMetaData rsmd = rs.getMetaData();
                     int column = rsmd.getColumnCount();
                     DefaultTableModel dtm2 = new DefaultTableModel();
                     Vector columns_name = new Vector();
                     Vector data_raws = new Vector();
                     
                     for(int i=1; i<=column; i++){
                         columns_name.addElement(rsmd.getColumnName(i));
                     }
                     dtm2.setColumnIdentifiers(columns_name);
                     while(rs.next()){
                         data_raws = new Vector();
                         for (int j=1; j<=column; j++){
                             data_raws.addElement(rs.getString(j));
                         }
                         dtm2.addRow(data_raws);
                     }
                     
                     printPrivewTable.setModel(dtm2);
                 } catch (SQLException ex) {
                     Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                 }
        }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
        }
    }//GEN-LAST:event_showHarvestProgramCCButtonActionPerformed

    private void showTotalCaneYieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTotalCaneYieldButtonActionPerformed
        // TODO add your handling code here:
        if (ConventionalRadioButton.isSelected() == true){
             int NT = 0;
                int NTN = appData.getNewTotalTableN();
               NT = appData.getTotalTableN();
               int diff = NT - NTN;
               if(diff > 5){
                 try {
                     rs = appData.getTotalHCane();
                     ResultSetMetaData rsmd = rs.getMetaData();
                     int column = rsmd.getColumnCount();
                     DefaultTableModel dtm3 = new DefaultTableModel();
                     Vector columns_name = new Vector();
                     Vector data_raws = new Vector();
                     
                     for(int i=1; i<=column; i++){
                         columns_name.addElement(rsmd.getColumnName(i));
                     }
                     dtm3.setColumnIdentifiers(columns_name);
                     while(rs.next()){
                         data_raws = new Vector();
                         for (int j=1; j<=column; j++){
                             data_raws.addElement(rs.getString(j));
                         }
                         dtm3.addRow(data_raws);
                     }
                     
                     printPrivewTable.setModel(dtm3);
                     
                                 rs = appData.getTotalHCaneInP();
                                    rsmd = rs.getMetaData();
                                    column = rsmd.getColumnCount();
                                    //DefaultTableModel dtm3 = new DefaultTableModel();
                                    columns_name = new Vector();
                                    data_raws = new Vector();

                                            for(int i=1; i<=column; i++){
                                                columns_name.addElement(rsmd.getColumnName(i));
                                            }
                                            dtm3.setColumnIdentifiers(columns_name);
                                                    while(rs.next()){
                                                        data_raws = new Vector();
                                                        for (int j=1; j<=column; j++){
                                                            data_raws.addElement(rs.getString(j));
                                                        }
                                                        dtm3.addRow(data_raws);
                                                    }

                                       printPrivewTable.setModel(dtm3);
                 } catch (SQLException ex) {
                     Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                 }
               }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
        }else{
            int NT = 0;
        NT = appData.getNewTotalTableN();
        if(NT > 2){
                try {
                    rs = appData.getNewTotalHCane();
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int column = rsmd.getColumnCount();
                    DefaultTableModel dtm3 = new DefaultTableModel();
                    Vector columns_name = new Vector();
                    Vector data_raws = new Vector();
                    
                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                    while(rs.next()){
                        data_raws = new Vector();
                        for (int j=1; j<=column; j++){
                            data_raws.addElement(rs.getString(j));
                        }
                        dtm3.addRow(data_raws);
                    }
                    
                    printPrivewTable.setModel(dtm3);
                    
                    
                    
                    rs = appData.getNewTotalHCaneInP();
                    rsmd = rs.getMetaData();
                    column = rsmd.getColumnCount();
                    //DefaultTableModel dtm3 = new DefaultTableModel();
                    columns_name = new Vector();
                    data_raws = new Vector();
                    
                    for(int i=1; i<=column; i++){
                        columns_name.addElement(rsmd.getColumnName(i));
                    }
                    dtm3.setColumnIdentifiers(columns_name);
                    while(rs.next()){
                        data_raws = new Vector();
                        for (int j=1; j<=column; j++){
                            data_raws.addElement(rs.getString(j));
                        }
                        dtm3.addRow(data_raws);
                    }
                    
                    printPrivewTable.setModel(dtm3);
                } catch (SQLException ex) {
                    Logger.getLogger(SMEHomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
        }else{
               JOptionPane.showMessageDialog(null, "Noting to show!");
               }
        }
    }//GEN-LAST:event_showTotalCaneYieldButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
         MessageFormat header = new MessageFormat("Supply Cycle");//+jTextField3.getText());
        MessageFormat footer = new MessageFormat("Page{0,number, integer}");
        try{
            MessageFormat x = new MessageFormat( "Total count of Books"); 
            Boolean complite =  printPrivewTable.print(JTable.PrintMode.NORMAL, header, footer); //&& jTextField2.print(header, x);
                    
            if(complite){
                JOptionPane.showMessageDialog(null, "Done Printing...");
            }else if(complite = false){
                JOptionPane.showMessageDialog(null, "Printing...");
            }
        }catch(java.awt.print.PrinterException e){
            System.err.printf("Cannot print %s%n", e.getMessage());
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SMEHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SMEHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SMEHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SMEHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SMEHomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ConventionalRadioButton;
    private javax.swing.JRadioButton FastTrackRadioButton;
    private javax.swing.JTable HarvestProgramEXSCTable;
    private javax.swing.JTable PlantationDTable;
    private javax.swing.JTable RePlantationDTable;
    private javax.swing.JTable TotalsInCaneTable;
    private javax.swing.JTextField aTextField;
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cCTextField;
    private javax.swing.JTextField cTextField;
    private javax.swing.JTextField cYTextField;
    private javax.swing.JButton clearFactoryButton;
    private javax.swing.JButton clearPlantationButton;
    private javax.swing.JButton clearYieldButton;
    private javax.swing.JTextField fIDTextField;
    private javax.swing.JTextField fNTextField;
    private javax.swing.JButton generateConventionalButton;
    private javax.swing.JButton generateFastTrackButton;
    private javax.swing.JTextField iSCCTextField;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField mCTextField;
    private javax.swing.JTextField nMSTextField;
    private javax.swing.JTextField oRSTextField;
    private javax.swing.JTextField pIDTextField;
    private javax.swing.JTextField pIDTextField1;
    private javax.swing.JTable plantationTable;
    private javax.swing.JButton printButton;
    private javax.swing.JTable printPrivewTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton refreshTableButton;
    private javax.swing.JTextField sCCTextField;
    private javax.swing.JButton saveFactoryButton;
    private javax.swing.JButton savePlantationButton;
    private javax.swing.JButton saveYieldButton;
    private javax.swing.JButton showConventionalButton;
    private javax.swing.JButton showFastTrackButton;
    private javax.swing.JButton showHarvestProgramCCButton;
    private javax.swing.JButton showHarvestProgramEXSCButton;
    private javax.swing.JButton showIstablishmentScheduleButton;
    private javax.swing.JButton showTotalCaneYieldButton;
    private javax.swing.JTextField tPATextField;
    private javax.swing.JTextField tRSTextField;
    // End of variables declaration//GEN-END:variables
}
